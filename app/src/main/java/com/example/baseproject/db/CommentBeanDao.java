package com.example.baseproject.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMENT_BEAN".
*/
public class CommentBeanDao extends AbstractDao<CommentBean, Long> {

    public static final String TABLENAME = "COMMENT_BEAN";

    /**
     * Properties of entity CommentBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Msg = new Property(1, String.class, "msg", false, "MSG");
        public final static Property Photo = new Property(2, String.class, "photo", false, "PHOTO");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Commentnum = new Property(4, int.class, "commentnum", false, "COMMENTNUM");
        public final static Property Zannum = new Property(5, int.class, "zannum", false, "ZANNUM");
        public final static Property Data = new Property(6, String.class, "data", false, "DATA");
        public final static Property School = new Property(7, String.class, "school", false, "SCHOOL");
    }


    public CommentBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CommentBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMENT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MSG\" TEXT," + // 1: msg
                "\"PHOTO\" TEXT," + // 2: photo
                "\"NAME\" TEXT," + // 3: name
                "\"COMMENTNUM\" INTEGER NOT NULL ," + // 4: commentnum
                "\"ZANNUM\" INTEGER NOT NULL ," + // 5: zannum
                "\"DATA\" TEXT," + // 6: data
                "\"SCHOOL\" TEXT);"); // 7: school
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMENT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommentBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(2, msg);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(3, photo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getCommentnum());
        stmt.bindLong(6, entity.getZannum());
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(7, data);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(8, school);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommentBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(2, msg);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(3, photo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getCommentnum());
        stmt.bindLong(6, entity.getZannum());
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(7, data);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(8, school);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CommentBean readEntity(Cursor cursor, int offset) {
        CommentBean entity = new CommentBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // msg
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // photo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.getInt(offset + 4), // commentnum
            cursor.getInt(offset + 5), // zannum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // data
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // school
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommentBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhoto(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCommentnum(cursor.getInt(offset + 4));
        entity.setZannum(cursor.getInt(offset + 5));
        entity.setData(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSchool(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CommentBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CommentBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CommentBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
