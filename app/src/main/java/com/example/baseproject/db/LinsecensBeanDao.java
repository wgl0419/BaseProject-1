package com.example.baseproject.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LINSECENS_BEAN".
*/
public class LinsecensBeanDao extends AbstractDao<LinsecensBean, Long> {

    public static final String TABLENAME = "LINSECENS_BEAN";

    /**
     * Properties of entity LinsecensBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Photo = new Property(1, String.class, "photo", false, "PHOTO");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
        public final static Property Comment = new Property(4, String.class, "comment", false, "COMMENT");
        public final static Property Zan = new Property(5, String.class, "zan", false, "ZAN");
        public final static Property School = new Property(6, String.class, "school", false, "SCHOOL");
        public final static Property Msg = new Property(7, String.class, "msg", false, "MSG");
    }


    public LinsecensBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LinsecensBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LINSECENS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PHOTO\" TEXT," + // 1: photo
                "\"NAME\" TEXT," + // 2: name
                "\"TIME\" TEXT," + // 3: time
                "\"COMMENT\" TEXT," + // 4: comment
                "\"ZAN\" TEXT," + // 5: zan
                "\"SCHOOL\" TEXT," + // 6: school
                "\"MSG\" TEXT);"); // 7: msg
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LINSECENS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LinsecensBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(2, photo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(5, comment);
        }
 
        String zan = entity.getZan();
        if (zan != null) {
            stmt.bindString(6, zan);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(7, school);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(8, msg);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LinsecensBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(2, photo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(5, comment);
        }
 
        String zan = entity.getZan();
        if (zan != null) {
            stmt.bindString(6, zan);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(7, school);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(8, msg);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LinsecensBean readEntity(Cursor cursor, int offset) {
        LinsecensBean entity = new LinsecensBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // photo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // comment
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // zan
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // school
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // msg
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LinsecensBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhoto(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setComment(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZan(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSchool(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMsg(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LinsecensBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LinsecensBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LinsecensBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
