package com.example.baseproject.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOME_BEAN".
*/
public class HomeBeanDao extends AbstractDao<HomeBean, Long> {

    public static final String TABLENAME = "HOME_BEAN";

    /**
     * Properties of entity HomeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Photo = new Property(1, String.class, "photo", false, "PHOTO");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Birth = new Property(3, String.class, "birth", false, "BIRTH");
        public final static Property Xingzuo = new Property(4, String.class, "xingzuo", false, "XINGZUO");
        public final static Property Gexing = new Property(5, String.class, "gexing", false, "GEXING");
        public final static Property Music = new Property(6, String.class, "music", false, "MUSIC");
        public final static Property School = new Property(7, String.class, "school", false, "SCHOOL");
        public final static Property Ge = new Property(8, String.class, "ge", false, "GE");
        public final static Property Hobby = new Property(9, String.class, "hobby", false, "HOBBY");
        public final static Property Provenic = new Property(10, String.class, "provenic", false, "PROVENIC");
        public final static Property Km = new Property(11, int.class, "km", false, "KM");
    }


    public HomeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HomeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOME_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PHOTO\" TEXT," + // 1: photo
                "\"NAME\" TEXT," + // 2: name
                "\"BIRTH\" TEXT," + // 3: birth
                "\"XINGZUO\" TEXT," + // 4: xingzuo
                "\"GEXING\" TEXT," + // 5: gexing
                "\"MUSIC\" TEXT," + // 6: music
                "\"SCHOOL\" TEXT," + // 7: school
                "\"GE\" TEXT," + // 8: ge
                "\"HOBBY\" TEXT," + // 9: hobby
                "\"PROVENIC\" TEXT," + // 10: provenic
                "\"KM\" INTEGER NOT NULL );"); // 11: km
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOME_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(2, photo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(4, birth);
        }
 
        String xingzuo = entity.getXingzuo();
        if (xingzuo != null) {
            stmt.bindString(5, xingzuo);
        }
 
        String gexing = entity.getGexing();
        if (gexing != null) {
            stmt.bindString(6, gexing);
        }
 
        String music = entity.getMusic();
        if (music != null) {
            stmt.bindString(7, music);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(8, school);
        }
 
        String ge = entity.getGe();
        if (ge != null) {
            stmt.bindString(9, ge);
        }
 
        String hobby = entity.getHobby();
        if (hobby != null) {
            stmt.bindString(10, hobby);
        }
 
        String provenic = entity.getProvenic();
        if (provenic != null) {
            stmt.bindString(11, provenic);
        }
        stmt.bindLong(12, entity.getKm());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(2, photo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(4, birth);
        }
 
        String xingzuo = entity.getXingzuo();
        if (xingzuo != null) {
            stmt.bindString(5, xingzuo);
        }
 
        String gexing = entity.getGexing();
        if (gexing != null) {
            stmt.bindString(6, gexing);
        }
 
        String music = entity.getMusic();
        if (music != null) {
            stmt.bindString(7, music);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(8, school);
        }
 
        String ge = entity.getGe();
        if (ge != null) {
            stmt.bindString(9, ge);
        }
 
        String hobby = entity.getHobby();
        if (hobby != null) {
            stmt.bindString(10, hobby);
        }
 
        String provenic = entity.getProvenic();
        if (provenic != null) {
            stmt.bindString(11, provenic);
        }
        stmt.bindLong(12, entity.getKm());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HomeBean readEntity(Cursor cursor, int offset) {
        HomeBean entity = new HomeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // photo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // birth
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // xingzuo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gexing
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // music
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // school
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ge
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // hobby
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // provenic
            cursor.getInt(offset + 11) // km
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhoto(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBirth(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setXingzuo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGexing(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMusic(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSchool(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGe(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHobby(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setProvenic(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setKm(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
