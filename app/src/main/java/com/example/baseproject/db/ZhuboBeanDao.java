package com.example.baseproject.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZHUBO_BEAN".
*/
public class ZhuboBeanDao extends AbstractDao<ZhuboBean, Long> {

    public static final String TABLENAME = "ZHUBO_BEAN";

    /**
     * Properties of entity ZhuboBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Province = new Property(1, String.class, "province", false, "PROVINCE");
        public final static Property Desc = new Property(2, String.class, "desc", false, "DESC");
        public final static Property City = new Property(3, String.class, "city", false, "CITY");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Idd = new Property(5, String.class, "idd", false, "IDD");
        public final static Property Url = new Property(6, String.class, "url", false, "URL");
        public final static Property Hobby = new Property(7, String.class, "hobby", false, "HOBBY");
        public final static Property Age = new Property(8, String.class, "age", false, "AGE");
        public final static Property Se = new Property(9, int.class, "se", false, "SE");
        public final static Property Music = new Property(10, String.class, "music", false, "MUSIC");
        public final static Property Fensi = new Property(11, String.class, "fensi", false, "FENSI");
        public final static Property Xingzuo = new Property(12, String.class, "xingzuo", false, "XINGZUO");
        public final static Property Pingtai = new Property(13, String.class, "pingtai", false, "PINGTAI");
        public final static Property Leveal = new Property(14, int.class, "leveal", false, "LEVEAL");
        public final static Property Yanzhi = new Property(15, String.class, "yanzhi", false, "YANZHI");
        public final static Property Msg = new Property(16, String.class, "msg", false, "MSG");
    }


    public ZhuboBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ZhuboBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ZHUBO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PROVINCE\" TEXT," + // 1: province
                "\"DESC\" TEXT," + // 2: desc
                "\"CITY\" TEXT," + // 3: city
                "\"NAME\" TEXT," + // 4: name
                "\"IDD\" TEXT," + // 5: idd
                "\"URL\" TEXT," + // 6: url
                "\"HOBBY\" TEXT," + // 7: hobby
                "\"AGE\" TEXT," + // 8: age
                "\"SE\" INTEGER NOT NULL ," + // 9: se
                "\"MUSIC\" TEXT," + // 10: music
                "\"FENSI\" TEXT," + // 11: fensi
                "\"XINGZUO\" TEXT," + // 12: xingzuo
                "\"PINGTAI\" TEXT," + // 13: pingtai
                "\"LEVEAL\" INTEGER NOT NULL ," + // 14: leveal
                "\"YANZHI\" TEXT," + // 15: yanzhi
                "\"MSG\" TEXT);"); // 16: msg
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZHUBO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ZhuboBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(2, province);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(3, desc);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String idd = entity.getIdd();
        if (idd != null) {
            stmt.bindString(6, idd);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
 
        String hobby = entity.getHobby();
        if (hobby != null) {
            stmt.bindString(8, hobby);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(9, age);
        }
        stmt.bindLong(10, entity.getSe());
 
        String music = entity.getMusic();
        if (music != null) {
            stmt.bindString(11, music);
        }
 
        String fensi = entity.getFensi();
        if (fensi != null) {
            stmt.bindString(12, fensi);
        }
 
        String xingzuo = entity.getXingzuo();
        if (xingzuo != null) {
            stmt.bindString(13, xingzuo);
        }
 
        String pingtai = entity.getPingtai();
        if (pingtai != null) {
            stmt.bindString(14, pingtai);
        }
        stmt.bindLong(15, entity.getLeveal());
 
        String yanzhi = entity.getYanzhi();
        if (yanzhi != null) {
            stmt.bindString(16, yanzhi);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(17, msg);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ZhuboBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(2, province);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(3, desc);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String idd = entity.getIdd();
        if (idd != null) {
            stmt.bindString(6, idd);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
 
        String hobby = entity.getHobby();
        if (hobby != null) {
            stmt.bindString(8, hobby);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(9, age);
        }
        stmt.bindLong(10, entity.getSe());
 
        String music = entity.getMusic();
        if (music != null) {
            stmt.bindString(11, music);
        }
 
        String fensi = entity.getFensi();
        if (fensi != null) {
            stmt.bindString(12, fensi);
        }
 
        String xingzuo = entity.getXingzuo();
        if (xingzuo != null) {
            stmt.bindString(13, xingzuo);
        }
 
        String pingtai = entity.getPingtai();
        if (pingtai != null) {
            stmt.bindString(14, pingtai);
        }
        stmt.bindLong(15, entity.getLeveal());
 
        String yanzhi = entity.getYanzhi();
        if (yanzhi != null) {
            stmt.bindString(16, yanzhi);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(17, msg);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ZhuboBean readEntity(Cursor cursor, int offset) {
        ZhuboBean entity = new ZhuboBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // province
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // desc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // city
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // idd
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // hobby
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // age
            cursor.getInt(offset + 9), // se
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // music
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // fensi
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // xingzuo
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // pingtai
            cursor.getInt(offset + 14), // leveal
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // yanzhi
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // msg
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ZhuboBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProvince(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIdd(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHobby(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAge(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSe(cursor.getInt(offset + 9));
        entity.setMusic(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFensi(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setXingzuo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPingtai(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLeveal(cursor.getInt(offset + 14));
        entity.setYanzhi(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMsg(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ZhuboBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ZhuboBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ZhuboBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
